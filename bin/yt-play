#!/bin/bash

# XXXbash: I couldn't get jobs -p reliably working with dash.
# I'm sure dash is 100% standards correct, but it's easier to
# just punt to bash.

PLAYER=""
PLAYERS="omxplayer mplayer"
FIFONAME='/tmp/yt-play-fifo'
LOCKFILE='/tmp/yt-play-lock'
MYURL='http://192.168.2.107/cgi-bin/webplay.sh?d=https://www.youtube.com'

# dbg?
#set -x

PRINTAWK_normal='
function printtitle(name,count)
{
	print "\x1b[32m";
	print name;
	print "\x1b[0m";
}
function printurl(base,url,thumb)
{
	printf "\t%s%s\n", base, url
}'
PRINTAWK_html='
function printtitle(name,count)
{
	count > 1 && plural="s"
	printf "<h3>%s (%d URL%s)</h3>\n", name, count, plural
}

function printurl(base,url,thumb)
{

	printf "<a href=\"%s%s\">\n", base, url
	if (length(thumb) > 0) {
		if (!match(thumb, "^http"))
			thumb = "https:" thumb
		printf "<img src=\"%s\"/><br>\n", thumb
	}
	printf "%s%s</a><br>\n", base, url
}
'
SEARCHAWK='
/ title=/ {
	getline
	# need a non-associate array here to preserve order
	titles[++curtitle] = $0
	next
}
/Thumbnail/ {
	for (i = 1; i <= NF; i++) {
		if (!match($i, "src="))
			continue

		sub("src=\"", "", $i)
		sub("\"", "", $i)
		curthumb = $i
		break
	}
}
/\/watch/ {
	if (n) {
		urlcount[curtitle]++
		urls[curtitle,urlcount[curtitle]] = $1
		thumbs[$1] = curthumb
		n = 0;
	} else {
		n++;
	}
}
END {
	# O(n^2), but with ~20 entries we do not care)
	for (i = 1; i <= curtitle; i++) {
		printtitle(titles[i], urlcount[i])
		for (data in urls) {
			split(data, ar, "\034");
			if (ar[1] != i)
				continue
			url=urls[ar[1],ar[2]]
			printurl(myurl, url, thumbs[url])
		}
	}
}
'

dosearch ()
{
	local printme printawk
	if [ $1 = '-s' ]; then
		printme=normal
	else
		printme=html
	fi
	eval printawk=\${PRINTAWK_${printme}}
	shift

	str="`echo $@ | sed -e 's, ,+,g'`"
	curl -s "https://www.youtube.com/results?search_query=$str" \
	    | sed -n '/Thumbnail/p;/"\/watch/s/"/\
/gp' | awk -v myurl="${MYURL}" "${printawk} ${SEARCHAWK}"
}

die ()
{

	eval=$1
	shift
	echo $*
	exit ${eval}
}

case "$1" in
'-s'|'-S')
	dosearch "$@"
	exit 0
	;;
-h)
	echo "Usage: yt-play [-s search] [url]"
	exit 0
	;;
esac

for a in ${PLAYERS} ; do
	type $a >/dev/null 2>&1
	if [ $? = 0 ]; then
		PLAYER=$a
		break
	fi
done
[ -z "${PLAYER}" ] && die 1 "Cannot find a valid player"

playone ()
{
	local dlapp
	local dlappargs

	unset RTMPKILL
	case "$1" in
	*youtube.com*)
		dlapp=youtube-dl
		dlappargs='--no-part'
		;;
	*areena.yle.fi*)
		dlapp=yle-dl
		dlappargs='--sublang none'
		# XXX!
		RTMPKILL='pkill -9 rtmpdump'
		;;
	*)
		die 2 "Unsupported source \"$1\""
	esac
	type ${dlapp} >/dev/null 2>&1 || die 3 "Cannot find ${dlapp}"

	${2} ${dlapp} ${dlappargs} -o ${FIFONAME} ${1}
}

QUITTIME=false
quitsig ()
{

	QUITTIME=true
	cleanup
}

goner ()
{

	cleanup
	rm -f ${FIFONAME}
	rm -f ${LOCKFILE}
}

trap quitsig INT TERM

cleanup ()
{
	local killsig=''

	rm -f ${FIFONAME}
	for sig in TERM KILL; do
		killpids=$(jobs -p)
		if [ ! -z "${killpids}" ]; then
			kill -${sig} ${killpids}
			sleep 1
		fi
	done
	${RTMPKILL}
	wait
	wait
	wait
}

# first do a dry run to check that we know how to play all
for arg in "$@"; do
	playone $arg :
done

# right, to get playin'

# first, check for a previous instance and take the lock
set -o noclobber
exec 3>&2 2>/dev/null
while ! echo $$ > ${LOCKFILE}; do
	prevpid=`cat ${LOCKFILE}`
	[ $? -eq 0 ] || die 5 cannot access ${LOCKFILE}
	echo "killing old player at $prevpid"
	kill ${prevpid} || die 6 maybe stale lock at ${LOCKFILE}
	sleep 1
done
trap goner 0
exec 2>&3 3>&-
mkfifo ${FIFONAME} || die 7 Failed to create fifo ${FIFONAME}

# don't bother with further output if we're not on a tty
test -t 0 || exec 1>/dev/null 2>/dev/null

# then play one-by-one
for arg in "$@"; do
	${QUITTIME} && break

	# start the player and leech in the background so that
	# we can get signals while they are running
	${PLAYER} ${FIFONAME} &
	playone $arg &

	${QUITTIME} && break

	# Wait for them to finish.  Wait for the downloader first, since
	# if an invalid url was given, nothing might be written for the
	# player thereby causing a hang.
	wait %2
	# make sure player knows it's EOF time
	echo please please baby lemonade > ${FIFONAME}
	wait
done

exit 0
